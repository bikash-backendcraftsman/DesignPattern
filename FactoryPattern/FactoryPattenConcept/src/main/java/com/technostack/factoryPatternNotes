Pattern      Core Goal

Factory      Encapsulate object creation logic and decide which subclass or implementation to instantiate.

The factory pattern :-

    In class-based programming, the factory method pattern is a creational pattern that uses factory methods to deal with
     the problem of creating objects without having to specify the exact class of the object that will be created. This is
     done by creating objects by calling a factory method—either specified in an interface and implemented by child classes,
     or implemented in a base class and optionally overridden by derived classes—rather than by calling a constructor.


🧠 2️⃣ Simple Way to Think

🟩 Singleton = “One instance shared”

Control how many objects exist.

🟦 Factory = “Which instance to create”

Control which type of object to create.


✅ Key Points:
	•	Creates different objects based on input type.
	•	Centralizes creation logic.
	•	The number of objects = depends on how many times factory is called.
	•	Focuses on type of object, not lifecycle.

✅ Use Factory when:
	•	You want to delegate object creation logic.
	•	The object type may vary (runtime decision).

Examples:
	•	Payment processors (UPI, Card, NetBanking)
	•	File parsers (CSVParser, XMLParser, JSONParser)
	•	Notification senders (Email, SMS, Push)


🧠 9️⃣ Quick Mnemonic to Remember

Singleton = ONE object shared
Factory = MANY objects decided dynamically

👉 Singleton = “How many”
👉 Factory = “Which one”


Links  to Learn
===============
1 >
2 > https://medium.com/@thecodebean/factory-design-pattern-implementation-in-java-bd16ebb012e2
3 > https://medium.com/@eshikashah2001/exploring-the-factory-method-design-pattern-4d270b6ff935